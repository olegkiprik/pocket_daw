// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/daw_with_ffi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class DawWithFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DawWithFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DawWithFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int export_wav(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> wav_srcs,
    ffi.Pointer<ffi.Uint64> src_lengths,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> played_arr,
    ffi.Pointer<ffi.Uint64> played_lengths,
    int nr_tracks,
    ffi.Pointer<ffi.Uint8> wav_out,
  ) {
    return _export_wav(
      wav_srcs,
      src_lengths,
      played_arr,
      played_lengths,
      nr_tracks,
      wav_out,
    );
  }

  late final _export_wavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Uint64,
              ffi.Pointer<ffi.Uint8>)>>('export_wav');
  late final _export_wav = _export_wavPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Uint64>,
          int,
          ffi.Pointer<ffi.Uint8>)>();
}